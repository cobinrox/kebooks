<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Architecture</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->
  <link rel="stylesheet" href="../../Styles/table.css" type="text/css" />

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../../Styles/page-template.xpgt" />
</head>

<body>
<div>
<h1>Architecture</h1>
<h3>Goals for this Chapter</h3>
<p>By the end of this chapter, you should be able to answer the following questions confidently.  (These are real-life scenarios that are based on true events, by the way.)</p>
<ul>
  <li>On your laptop, what phases do your file changes go through?</li>
  <li>What Git command moves your changes that are on your local repo up to the remote repo?</li>
  <li>Your colleague, George, says he has committed the fixes to a piece of software (or document).  Are the fixes safe if George or his computer is hit by a bus?</li>
</ul>
<h3>An Aside: Analogies</h3>
<i>Skip this <i>subsection</i> if you are 100% comfortable with all of the Git local and remote commands and you know which commands are only local and which are only remote.  And if you understand that last sentence.</i>

<h4>A Library Analogy</h4>
<p>This chapter shows a high-level conceptual architectural view of Git.  But before we get too far into the architecture, I am going to go way out on a limb and give you an analogy that is both useful and tragic: Think of Git like a public library with its card catalog.</p>
<div style="text-align:center;"><img src="../../Images/arch/libcat.jpg" alt=" " width="550" style="padding-bottom:0.2em"/><br/><i>A library of books and its card catalog can be an analogy for a Git repo, whether the repo is a public library, maintained by a city, or is a personal, private library that you have in your house.</i></div>

<p>  The library and card catalog combined provide the version control of the library's books or assets, aka <i>artifacts</i>.  There are master copies of artifacts that you can check out.  If you need War and Peace, you look up the book via the card catalog, find its Dewey decimal number,  find the physical book in the library's stacks, and then check it out and you can bring it home.  Now, if your dog chews on it at home or your kid (or your Grandma Vi) spills peanut butter and jelly on some of the pages and then you return the book to the library, it is checked back in and now someone else can checkout the book (albeit now with some chewed up pages and peanut butter adornment).</p>
<p>Go a little deeper into the analogy: Suppose that a new artifact has been added to the library, like a new book, "Git for the Gitlexic".  The card catalog of the library must be updated with that new book.  Likewise, if the community decided to remove a book from the library, for example, they want to remove "Huckleberry Finn", they would remove the book, but also remove it from the listing in the card catalog.</p>
<p>Now go yet even further into the analogy: Suppose that instead of just an individual book to bring home, you bring the <i>entire</i> contents of the library home. (This is an analogy, remember, not a quantum thought exercise.) You now can read whatever book you want and if you spill peanut butter on any of the books, its all in your library in your house, so who cares?</p>
<p>And now a step further: Your friend tells you about this new book that just came out  called "Words to Sleep By" and that it's available at "the library" and that you should read it.  Now what? Obviously <i>your</i> copy of the library at your house does not just magically have this new book: the book is only available at the "real" library.  In truth, the analogy here starts to breaks down.  But if you keep in mind that a library of artifacts is summarized in a card catalog, and you have a copy of the library and card catalog that is independently owned by you in your own house, you should be well on your way to getting Git.</p>
<p>Bottom Line: Although not a perfect analogy, you can try to think of Git as having a card catalog that keeps track of artifacts.  If a new artifact is added, the card catalog has to be updated too.  The card catalog is actually the most important concept in this analogy.</p>

<h4>Other Remote Repository Analogies</h4>
<p>If you have worked in IT, you may have encountered other so-called remote repositories that actually download local copies of thier repo down to your laptop.  So you can think of the Git remote and local repo concept in a similar vein as:</p>
<ul>
  <li>Maven</li>
  <li>Linux package repositories
    <ul> 
    <li>apt</li>
    <li>rpm</li> 
    <li>yum</li>
    </ul>
  </li> 
</ul>

<h3>Terms</h3>
<p>Important definition/terms are provided below.  Note that all of the definitions that are presented in each chapter are duplicated at the end of the book in a Glossary chapter.</p>
<table>
  <tr>
    <td><b>Term</b></td>
    <td><b>Definition</b></td>
  </tr>
  <tr>
    <td>Artifact</td>
    <td>An item that is being version controlled, such as a file, source code, a document, etc.</td>
  </tr>
  <tr>
    <td>Principal</td>
    <td>This is just an adjective to help identify that a given artifact resides on the remote server and is considered the "ground-truth" of the artifact.  This term is used to help avoid over-loading of the term "master". So, if an item is referred to as a "principal artifact", it means that the item exists on the remote server.</td>
  </tr>
  <tr>
    <td>Branch</td>
    <td>The concept of isolating parallel development directories within a single repo.  A local repo has branches, and a remote repo has branches.</td>
  </tr>
  <tr>
    <td>Master or Main Branch</td>
    <td>Top of the branch tree.  The master (or main, depending on which and how the Git server is configured) branch is the set of artifacts that are usually guarded and from which sub-branches are created and then, eventually, merged into.</td>
  </tr>
  <tr>
    <td>Repository or Repo</td>
    <td>This is where the artifacts for all branches of a repository are stored. </td>
  </tr>
  <tr>
    <td>Remote Repository</td>
    <td>Storage of a repository/set of artifacts usually on a large file server running in the cloud or in an IT closet. It represents the "principal", or "ground-truth" version of artifacts. It is usually backed up nightly and may be backed up to an off-site location.  It also is usually accessible through a web browser and usually requires administrator care and feeding to update security patches, increase disk space, etc.</td>
  </tr>
  <tr>
    <td>Local Repository</td>
    <td>Storage of a repository/set of artifacts that are stored on a user's (client's) laptop. On a client laptop, the repo is stored as a directory with a special ".git" subdirectory inside of it. </td>
  </tr>
  <tr>
    <td>Ledger</td>
    <td>Conceptual list of changes/history of the repo.  Your <i>local</i> ledger keeps track of changes that <i>you</i> make locally, the <i>remote</i> ledger keeps track of changes that other team members have contributed to the remote repo.</td>
  </tr>
  <tr>
    <td>Changed/Staged/Committed</td>
    <td>States or areas on your laptop within the local repo that file changes go through.</td>
  </tr>
  <tr>
    <td>Pushed</td>
    <td>State when a change is moved up from a local repo to the remote, principal repo.</td>
  </tr>
  <tr>
    <td>Registered</td>
    <td>Indicates that a file is officially part of a Git repo, whether that repo is a local repo or a remote repo.  In the library analogy, <i>registered</i> would mean that the artifact can be found in the local or the remote card catalog.</td>
  </tr>
  <tr>
    <td>Project</td>
    <td>A group of repositories associated with a commonality.  We have purposefully NOT used the term <i>project</i> so far to describe a set of artifacts and instead have used the terms <i>repository</i> or <i>directory</i>.  This is because the term <i>project</i> is used in a different sense in the Git world, similar to how <i>commit</i> does not really mean what many people may think of the meaning of <i>commit</i>.  In this chapter, we will begin to reveal the reason for using the term <i>repository</i> versus using a term like <i>project</i>.</td>
  </tr>
  <tr>
    <td>Git Commands</td>
    <td>The following Git commands are described briefly here to help understand the architecture/mechansims used by Git.  We will describe these commands in more detail in later chapters, but the basics of the commands need to be understood here.</td>
  </tr>
  
  <tr>
    <td>git init</td>
    <td>Run on your laptop, this establishes the current directory as a Git repo.  It creates the hidden ".git" subdirectory where Git on your laptop keeps track of the changes that you make.  Normally you would use this command only when you want to begin/create a new local Git repo, i.e. one that is not already up on a remote repo.</td>
  </tr>
  <tr>
    <td>git add [filename(s)]</td>
    <td>Run on your laptop, this tells the local Git repo that the file that you "add" (or, technically, the change that you made to a file) should be registered with Git.  The file (change to a file) is then moved to a "staging" area.  More detail about this will be presented below.</td>
  </tr>
  <tr>
    <td>git commit</td>
    <td>Not what you think it is.  This is merely a step that is taken to move a file along its states needed to <i>eventually</i> get the file/file's changes up to a remote/principal repo.</td>
  </tr>
  <tr>
    <td>git push</td>
    <td>Pushes the items from the commit area on your laptop up to the remote/principal repo.  This is (probably) what most people consider to be a what they would call a commit.</td>
  </tr>
  <tr>
    <td> git clone</td>
    <td>Downloads a repository from a remote repo down to your laptop. Note that when you download a repo, the ".git" directory is automatically created in the local repo as well.</td>
  </tr>
  <tr>
    <td> git fetch</td>
    <td>Downloads the most recent "card catalog" of changes that are on the remote repo to your laptop.</td>
  </tr>
  <tr>
    <td> git branch</td>
    <td>Lists the branches available in your local repository, or, if your card catalog is up-to-date, all the branches in the remote repo as well.</td>
  </tr>  
  <tr>
    <td> git checkout</td>
    <td>Poorly-named command run on your laptop that changes to or creates a different branch in the local repo.  Like "push", this command can easily be misunderstood.</td>
  </tr>
</table>

<h3>High-Level Diagramsss</h3>
<p>A high-level depiction of a typical Git layout may look as shown in the following figure.</p>
<div style="width:250 px; font-size:80%; text-align:center;"><img src="../../Images/arch/highlevelarch.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Git in its glory: a local laptop repo and a principle/Git server hosting multiple repos</i></div>
<br/>
<p>In the above figure, a user, like yourself, would have a local copy of the Git Client software and may have one or more repos stored locally on their laptop.  On a remote server somewhere (e.g. Github), a copy of the Git Server software and possibly many repos are stored on the server. Multiple users (coworkers, for example) also have laptops running the Git Client software and will also interact with the cloud server.</p>
<p>In the figure below, note that a "repo" usually consists of many artifacts (i.e., files) and that a repo may also consist of many "branches", or incantations of itself.</p>
<div style="width:250 px; font-size:80%; text-align:center;"><img src="../../Images/arch/highlevelrepo.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>A Git repo: may have multiple files and may have/be made up of multiple branches</i></div>
<br/>

<h3>Client/Server Architecture</h3>
<p>First, consider  Git as a client/server system but note that it can be run as just a client with no knowledge or interaction with a server.</p>
<p>The server side is, as you probably have guessed, an implementation of GitLab, GitHub, Bitbucket, or some other similar service that is normally installed on the "cloud", installed on a beefy machine, is administered often, and its contents are backed up off site.  It represents the "ground-truth" of a repository.</p>
<p>The client side is a smaller installation that resides on your workstation/laptop.  Normally you use the client Git application to access the server's (or other servers') Git service.  The client side can also actually be used just by itself to keep track of versioning of files that you only ever intend to keep locally (for example, say you are writing a book and just keep the updates to the book yourself, not interacting at all with a rempote repo/server). The client can also be set up to interact with another client, but that is out of the scope of the use cases in this book.</p>
<p>There are normally two repositories to consider for any one repository (or two libraries, if you think of the library analogy) in Git (and actually most version control systems) that are involved: the server-side repository, and the user's local repository.</p>
<ol>
  <li><p>The server-side repo is remote, (usually!) backed-up, and is the "yea-verily-the-right-stuff-repository-of-ground-truth-and-where-your-boss-or-professor-will-get-the-most-recent-crap-that-is-available" repository.</p>
  <div style="font-size:80%; text-align:center;"><img src="../../Images/arch/ghubweb300.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Sample remote repo/repository on a remote Git server (GitHub, in this case) viewed through the site's web page</i></div>
  </li>
  <li><p>The client-side repo is local to your laptop and is the "this-is-MY-crap-on-my-own-machine-so-I-can-do-whatever-I-want-with-it" repository.</p>
  <div style="width:100 px; font-size:80%; text-align:center;"><img src="../../Images/arch/ghubclient300.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Sample view of local repo/repository via Git command line on a client</i></div>
  </li>
</ol>
<p>Using the standard use case of downloading an existing repository from a Git server to your laptop (this is typically what you will encounter at your workplace), the client (you) installs Git on a laptop and then uses the Git commands to "clone" the repository down from the Git server.</p>
<div style="width:375 px; font-size:80%; text-align:center;"><img src="../../Images/arch/clientserver.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Git is a client/server system with local and remote repos.</i></div>
<p><i>(For those who read the library analogy: the two repositories represent the "real" library with its card catalog on the server and the "copy" of the library and its card catalog that you have at your house, or in this case, on your laptop.)</i></p>
<p>On the server, many repos can actually exist, representing different repositories.  For example, a GitLab server may host a repo for a Java repository, another repo for a Python repository, and yet another repo for a documentation repository.  And, for each of the repos, there can be multiple branches.</p>
<p>On the client, there can likewise be many repos, but each is stored as a <i>directory</i> on the client. So, for example, on your local machine, your repos could consist of a directory for a Java repository, another directory for a Python repository, and yet another for the documentation repository.  And, on your machine, your local repos are considered Git repos if they contain the special ".git" subdirectory.  If you remove this subdirectory from a repository, then that repository is no longer considered a Git repo: it's just a directory.  If you take an existing directory somewhere on your local machine and add a ".git" subdirectory (with some special contents that we will describe a little further on), then voila: That directory is now considered a <i>local</i> Git <i>repo</i>.  And, once again, be aware that in each of your repos you have (or can have) multiple branches. </p>
<h3>Branches</h3>
<p>Another dimension of a repo is the concept of <i>branches</i>.  These are conceptual, isolated, virtual sub-repos for a given repo.  The figure below shows this.  In the figure, the user's laptop has a single repo downloaded from the remote repo, which itself hosts multiple repos.  In each repo, multiple branches can coexist.</p>
<div style="width:250 px; font-size:80%; text-align:center;"><img src="../../Images/arch/3d.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Git repos and conceptualized branches.</i></div>
<br/>

<p>While the <i>remote</i> repository is usually created by and guarded by a repository owner, administrator, or gargoyle, the <i>local</i> repo is yours and yours alone.  <i>The remote repo has <b>NO</b> knowledge of your local repo.</i>  This is emphasized to assure you that if you accidentally delete the files in your local repo or get them totally bollixed up, the remote repo will not know about nor care about it.  </p>


<h3>Local Repo and Ledger</h3>
<p>This subsection takes a closer look at Git on your laptop, or the local repo.  On your local repo, Git uses a nominal architecture conceptualized in the following figure.  Note again this is a conceptual illustration.</p>
<div style="width:375 px; font-size:80%; text-align:center;"><img src="../../Images/arch/ledgers.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Git and Ledgers</i></div>

<p>And the following diagram may help to visualize why Git has so many states and commands.  If you have a well-behaved and trust-worthy IDE that effectively hides the Git commands from you, you may still be interested in this figure in case you ever have to run Git in the wild, i.e., without the safety blanket of an IDE. </p>
<div style="width:375 px; font-size:80%; text-align:center;"><img src="../../Images/arch/gitarc.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Git, LOCAL architecture on your laptop on left, with REMOTE repo shown on right.</i></div>
<p>When you download a repository from the cloud/server, the result on your laptop is a directory (working directory) with the contents of the repo, but the directory also has a hidden subdirectory named ".git".  As with many IT programs, the .git subdirectory contains information (or a <i>ledger</i>) that the Git client uses to help keep track of changes on your laptop.  (You can think of this ".git" subdirectory as the local card catalog based on the analogy made in the start of this chapter. Or, perhaps a monk that watches what you are doing to the repo and marks the changes in the ledger.)</p>
<p>Within your local repo, as you make changes, the "hidden" ledger within the ".git" subdirectory keeps track of the changes that you make.  You can think of this action <i>similar</i> to transaction/change logs of a relational database that is updated as local database changes are made (before a final two-phased commit) though that may be a stretch, not to mention confusing due to the overloading of the term "commit".  In any event, the .git subdirectory and ledger is monitoring changes to the local repo (directory) as you create, delete, and make changes to files in the repo. And, if you are slightly creeped out by this last explanation, just delete the ".git" directory of your repo.  That is one nice thing about Git: its intrusion into your laptop is limited to the ".git" directory.</p>
<p>Once you have made changes to the contents in the repo, the changes must go through the following states in order to upload those changes to "the cloud"/remote repo.</p>
<ol>
  <li>File must be added to the local <b>Staging Area</b> by using the Git <b>add</b> command</li>
  <li>File must be moved to the local <b>Committed Area</b> by using the Git <b>commit</b> command</li>
  <li>File can now be uploaded to the remote repo/server by using the Git <b>push</b> command</li>
</ol>
<p>Make sure that you understand the above state changes: you cannot do a <i>commit</i> until you have <i>staged</i> a file, and, even when you do a <i>commit</i>, the file is <b><i>not</i></b> moved to the remote repo until you do a <b>push</b> to the remote/principal repo.  <i>Commit</i> in Git does not mean commit as you may be used to when using other SVN tools. To get a change up to the remote repo, a Git <b>push</b> command is required.</p>
<p>The states on the local repo are similar to a two-phased commit concept, but remember that this pertains only to your local repo: it takes a <i>push</i> to put the change up on the remote.  So, you could perhaps think of Git as a three-phase commit!</p>
<p>The following figure and boolean table show how these <i>primary</i> states interact in a nominal state diagram.  The term <i>primary</i> is emphasized because, in reality, there are dozens of actual states that can be represented.  See Appendix B for a real-world state diagram of Git in the wild.</p>
<p>In the boolean table, the columns represent the following conditions</p>
<ul>

  <li><b>L</b> = <b>Location</b>: an asset/asset changes are (1) or are not (0) up on the remote</li>
  <li><b>R</b> = <b>Registered</b>: an asset is (1) or is not (0) "registered"</li>
  <li><b>M</b> = <b>CoMmitted</b>: an asset/asset changes have been (1) or have not been (0) co<b>M</b>mitted to the (local) commit area</li>
  <li><b>S</b> = <b>Staged</b>: an asset/asset change has been (1) or has not been (0) added to the (local) staging area.  (Technically, if this column is true [1], then a file has undergone a change and the C column would also be true.  However, we are omitting this distinction to keep things simple.)</li>
  <li><b>C</b> = <b>Changed</b>: an asset has been (1) or has not been (0) changed locally</li>

</ul>
<div style="font-size:80%; text-align:center;"><img src="../../Images/arch/simplestatessm.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>"Simplifed" Git states.</i></div>


<br/>
<div>
<table class="center">
  <tr> 
    <th>L</th>
    <th>R</th>
    <th>M</th>
    <th>S</th>
    <th>C</th>
    <th>State Summary</th>
  </tr>
  <tr>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>A user has created a brand-new, local repo.  Example terminal commands that a user could execute to get into this state: mkdir repositoryX; Git init</td>
  </tr>
  <tr>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>1</td>
    <td>The user has made a change to a file. Example terminal command: echo "Hello" > greeting.txt</td>
  </tr>
  <tr>
    <td>0</td>
    <td>1</td>
    <td>0</td>
    <td>1</td>
    <td>0</td>
    <td>The user has "staged" the changed file. Note that the "Registered" column is also set at this time. This means that the file is registered (just like being added to your local copy of a card catalog). Additionally, note that the "Changed" column has been cleared, even though, technically, the file is still changed on your laptop.  Clearing this column helps in reducing the number of possible states and represents the actual logic that Git uses as files are modified and move through the staging and commit areas. Example terminal command: Git add greeting.txt</td>
  </tr>
  <tr>
    <td>0</td>
    <td>1</td>
    <td>1</td>
    <td>0</td>
    <td>0</td>
    <td>The user has "committed" the changed file. Once again, note now that both the "Registered" and "Changed" columns have been cleared.  Example terminal command: Git commit</td>
  </tr>
  <tr>
    <td>1</td>
    <td>1</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>The user has "pushed" the repository/changes up to the remote Git server and the file/file's changes now reside up on the remote server/repo. Example terminal command: Git push.  Technically, the user would have to also prep the remote repo if the repository did not yet exist up on the remote server, but for simplification, we are omitting some details.</td>
  </tr>
  <tr>
    <td>0</td>
    <td>1</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>A user "clones" the repository down to his or her laptop.</td>
  </tr>  
</table>
</div>

<p>Until a file (technically, a commit) is <b>pushed</b>, any changes are local only.  No one on the network is aware of the changes.  Your changes are local only and you have not affected the remote, principal repo.</p>
<p>If you wish to make your changes available to others on the team, then you need to push the changes up to the remote.  Others on the team can then download those changes to their laptops/local repos.</p>
<p>The following sequence diagram again attempts to summarize the local and remote Git interaction</p>
<div style="width:250 px; font-size:80%; text-align:center;"><img src="../../Images/arch/seq.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Simplified Git sequences between local and remote repositories.</i></div>

<p>As with life, the previous illustration shows a <i>simplified</i> Git interaction between a single user (client) and the server.  The next chapter offers more real-world scenarios involving multiple actors, similar to what you might face in the real world.</p>

<p>In summary, part of understanding the architecture is to recognize this concept of a ledger (or card catalog).  On both a local repo and the principal, remote repo, a ledger keeps track of changes made to that repo.  Again, you can think of the ledger, loosely, similar to a transaction log in a relational database.  <i>For the most part</i> these two ledgers are independent: changes on the local repo do not affect the remote repo, and vice versa.  However, the local remote can be <i>refreshed</i> with the ledger of the remote repo.  This is akin to downloading card catalog changes from a public library down to your local library.  When a user refreshes their local repo, they effectively can see what changes have been made to the remote.</p>
<p>We still need to go one step further, however.  Suppose that a teammate, say, Dave has committed locally and then has pushed changes up to the remote repo.  If another teammate, say, Julie, needs to get Dave's changes, how would she go about it?  First, Julie must update her "ledger" (or card catalog) on her local machine, using the Git "fetch" command. (We will cover this in more detail in the next chapter, but for now, concentrate on the architecture surrounding this scenario.)</p>


<h3>Chapter Questions</h3>
<p>We can now revisit the questions posed at the beginning of the chapter.</p>
  <ul>
    <li>On your laptop, what phases do your file changes go through?
      <ul>
        <li>Unchanged to Staged to Committed to Pushed</li>
      </ul>
    </li>
    <li>What Git command moves your changes that are on your local repo up to the remote repo?
      <ul>
        <li>Push</li>
      </ul>
    </li>
    <li>Your colleague, George, says he has committed the fixes to a piece of software (or document).  Are the fixes safe if George or his computer is hit by a bus?
      <ul>
        <li>Not really because remember if George means "commit" in the Git sense, then the fixes are still on his laptop.  Unless he pushed his fixes up to the server, then they are not really safe.</li>
      </ul>
    </li>
  </ul>
</div>
</body>
</html>
