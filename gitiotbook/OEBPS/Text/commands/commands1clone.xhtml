<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Git Commands</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->
  <link rel="stylesheet" href="../../Styles/table.css" type="text/css" />

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../../Styles/page-template.xpgt" />
</head>

<body>
<div>

  <h3>git clone</h3>
  <p><b>Syntax:</b></p>
  <pre><span class="inner-pre" style="font-size: 10px">
    git clone https://&lt;server_name&gt;/projectName/repoName.git
    git clone git@&lt;server_name&gt;:projectName/repoName.git
  </span></pre>
    <div style="text-align:center;"><img src="../../Images/commands/clone.jpg" alt=" " style="width: 500px;;padding-bottom:0.2em"/><br /><i>git clone</i></div>
  <h4>git clone: What it's supposed to do</h4>

  <p>This command copies an existing, remote repository from the remote server (e.g. from GitHub, GitLab, Bitbucket, your company's server, etc.) down to a user's laptop. The syntax of the command comes in two flavors, depending on whether you have registered a Secure Shell (SSH) key with the remote server.  The first syntax example above shows the command used if you do not have an account or have not registered an SSH key on the Git server; the second example, which is preferred, shows the command if you do have a registered key on the Git server.</p>
    
  <p>The HTTPS version may be desired to first get your feet wet with Git, but the SSH version is preferred because it allows you to perform the Git commands that involve the remote server without having to provide your credentials each time.  Setting up and registering an SSH key is shown in Appendix A so you are encouraged to do so, especially in your work/employment environment.</p>
  <p>When cloning the repo, a new directory is created with the name of the repo.  For example, if the name of the remote repo were "constitution", then after cloning the repo from the remote server, you will have a shiny new directory called "constitution".  The directory will contain the same files and branches that are on the remote repo.  Additionally, this directory will also have a special, hidden subdirectory called ".git".  As mentioned, this special directory can be thought of as a "ledger" that keeps track of local changes that you make. Each time you make a change to the local files, the "ledger" within the .git subdirectory will be updated. If this is the first time that you have cloned a repo, you should go ahead and display the contents of the repo directory and ensure that you see the .git subdirectory.  If you are using the command line to list the files, use the command "dir /a" (for Windows) or "ls -al" (for Mac/Linux) to show hidden.  If you are using a graphical file manager program to view files, then make sure that its option to "show hidden files" is on.</p>
  <p>The "git clone" command is shown in the example below, followed by changing to the local repo and then displaying the hidden ".git" directory.</p>
  <h4>git clone: Example use</h4>
  <pre><span class="inner-pre" style="font-size: 10px">
  C:\Users\jsmith&gt;git clone git@github.com:cobinrox/constitution.git
  Cloning into 'constitution'...
  remote: Enumerating objects: 17, done.
  remote: Counting objects: 100% (17/17), done.
  remote: Compressing objects: 100% (11/11), done.
  remote: Total 17 (delta 4), reused 0 (delta 0), pack-reused 0
  Receiving objects: 100% (17/17), done.
  Resolving deltas: 100% (4/4), done.
  C:\Users\jsmith&gt;cd constitution
  C:\Users\jsmith&gt;dir /a
   
  Directory of C:\Users\jsmith\constitution
 
 04/02/2023  07:22 AM    &lt;DIR&gt;          .
 04/02/2023  07:22 AM    &lt;DIR&gt;          ..
 04/02/2023  07:22 AM    &lt;DIR&gt;          .git
 04/02/2023  07:22 AM                 7 ammendments.txt
 04/02/2023  07:22 AM                15 preamble
 04/02/2023  07:22 AM                14 README.md
 04/02/2023  07:22 AM                24 sorting.js
  </span></pre>
<p>If you delete the .git directory, then the directory is no longer considered a local Git repo; it's just a directory.  Also, even though you have cloned this local repo, there is nothing stopping you from going to another area on your laptop and re-cloning the remote repo.  This is not usually a good practice, but you can do this when or if you want to start from scratch or need to verify the ground-truth of what is truly in the remote repo without poisoning that accuracy with any local changes that you may have made.  In any case, the two (or however many) copies that you cloned are independent.  You can also delete the local directory/repo and it will not affect the remote repo at all.  This is useful to remember, especially if you get totally confused and need or just want to start fresh.</p>
<p>Another note about the new repo directory and the .git subdirectory is that you can copy the entire directory from, say box A, over to another machine, box B.  For example, imagine you need to deploy your repo to an intermediary test computer, box B, located off site or in another area.  You can copy your remote repo as a regular directory and paste it onto box B.  Then, that computer will have a local Git repo, whether or not it has access to the Git server.  The advantage or purpose of doing this is so that as you are testing on box B, you can make changes to its local repo and (as long as box B has Git installed on it), Git can keep track of the incremental changes you make on box B.  This helps you keep track of changes across machines when in a moving testing environment that is not connected to a traditional CI/CD pipeline.  (You can also transfer a smaller number of files when dealing with large repos by setting up a target machine as a pseudo-remote and using "git push" to push changes to a secondary machine.)</p>

<div style="text-align:center;"><img src="../../Images/commands/copy.jpg" alt=" " style="width: 500px;;padding-bottom:0.2em"/><br /><i>Pseudo-cloning to other privately or non-networked target machines</i></div>

<p>Finally, when you perform a clone, the repo, once downloaded, will be defaulted (normally) to the master branch.  However, the Git administrator could set the "deafult" branch to be something other than the master branch, and may even re-name the term "master" to something else, e.g. "main".  We'll discuss the branch command a little later, but this is just another item to remember. </p>

<h4><img src="../../Images/small/w4.jpg" alt=" " class="heading-icon"/> git clone: What they forgot to mention</h4>
<p>What they <i>do</i> tell you but which is very easy to forget is that when you clone a repo, Git downloads the repo to a directory of its own name. So, in other words, when you are about to download a repo, say, "constitution", don't create a diretory called "constitution", then change to that directory, and then do the clone: you will wind up with a nested constitution directory.  Instead, I recommend that you keep a "gitprojects" directory that you normally go to when cloning various repos.</p>
<h4>git clone: Bottomline</h4>
  <ul>
    <li>The ssh version is preferred in the long run</li>
    <li>The hidden .git subdirectory keeps track of changes made locally</li>
    <li>You can move the entire repo directory elsewhere and not affect the remote repo</li>
    <li>You can make multiple clones if you have a need, e.g., to check ground-truth</li>
    <li>The default branch after a clone is normally "master" or "main", but could be something else, like "develop", or another buffer branch, based on how an administrator has set up the repo</li>
  </ul>
</div>
</body>
</html>
