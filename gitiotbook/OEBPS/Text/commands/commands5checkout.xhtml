<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>git status</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->
  <link rel="stylesheet" href="../../Styles/table.css" type="text/css" />

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../../Styles/page-template.xpgt" />
</head>

<body>
<div>

  <h3>git checkout/checkout -b</h3>
  <p><b>Syntax</b></p>
  <pre><span class="inner-pre" style="font-size: 10px">
    git checkout &lt;branch_name&gt;
    git checkout -b &lt;new_branch_name&gt;
  </span></pre>
  <div style="text-align:center;"><img src="../../Images/commands/checkout.jpg" alt=" " style="width: 500px;padding-bottom:0.2em"/><br /><i>git checkout: checking out an existing branch, and creating a new branch</i></div>
  <h4>git checkout: What it's supposed to do</h4>
  <p>This command is normally used to either "checkout", i.e. change, to a different branch on your local repo, or to create a new branch on your local repo.  The example below shows how a user might first run the "git branch -a" command to determine what branches are available, then use the "git checkout &lt;branch_name&gt;" command to checkout a branch, and then creates their own branch using the "git checkout -b &lt;new_branch_name&gt;" command.</p>
  <h4>git checkout: Example use</h4>
  <pre><span class="inner-pre" style="font-size: 10px">
  C:\Users\jsmith\constitution&gt;git branch -a
  * main
    remotes/origin/HEAD -&gt; origin/main
    remotes/origin/amys_feature_change_gui_name
    remotes/origin/bills_feature_remove_dead_code
    remotes/origin/dexters_feature_add_comments
    remotes/origin/main
  
  C:\Users\jsmith\constitution&gt;git checkout amys_feature_change_gui_name
  Branch amys_feature_change_gui_name set up to track remote branch amys_feature_change_gui_name from origin.
  Switched to a new branch 'amys_feature_change_gui_name'
  
  C:\Users\jsmith\constitution&gt;git status
  On branch amys_feature_change_gui_name
  Your branch is up-to-date with 'origin/amys_feature_change_gui_name'.
  nothing to commit, working tree clean
  
  C:\Users\jsmith\constitution&gt;git checkout main
  Switched to branch 'main'
  Your branch is up-to-date with 'origin/main'.
  
  C:\Users\jsmith\constitution&gt;git checkout -b my_new_branch
  Switched to a new branch 'my_new_branch'
  
  C:\Users\jsmith\constitution&gt;git branch -a
  amys_feature_change_gui_name
  main
* my_new_branch
  remotes/origin/HEAD  origin/main
  remotes/origin/amys_feature_change_gui_name
  remotes/origin/bills_feature_remove_dead_code
  remotes/origin/dexters_feature_add_comments
  remotes/origin/main

  C:\Users\jsmith\constitution&gt;git status
  On branch my_new_branch
  nothing to commit, working tree clean
</span></pre>
<h4>git checkout: Example checkout in VSCode</h4>
<div style="text-align:center;"><img src="../../Images/commands/vsc_checkout.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>git checkout: Creating new, or checking out an existing branch via VSCode</i></div>

  <p>One of the main uses of the checkout command is to allow a developer to change over to colleagues' branches without having to download and create new directories specifically for working with the colleagues' branches.  Instead, the ideal workflow is something like this:</p>
  <ol>
    <li>Developer Amy is working with her local repo on her own branch, called, feature_a.</li>
    <li>Developer Bill is having a problem with his branch, feature_b, and so asks Developer Amy to take a look at it.</li>
    <li>Developer Bill pushes his branch up to the remote repo so that Developer Amy can check it out.</li>
    <li>Developer Amy runs "git remote update", "get checkout feature_b", and "git pull."  </li>
    <li>Developer Amy can now look at Developer Bill's code and help find the problem and let Developer Bill know about the problem.</li>
    <li>Developer Amy can now checkout her feature_a branch again and continue working on her feature.</li>
  </ol>
  The above scenario shows the benefit of Git in that you can checkout someone elses code without having to save it to a separate directory and then, when you are done looking at that other branch, you can go checkout your original branch and continue with your work.  It is as if Git is creating subdirectories of your branch and the other branch and they are separated and clean.
  <h4><img src="../../Images/small/w4.jpg" alt=" " class="heading-icon"/> git checkout: What they forgot to mention</h4>
    <p>There are three major warnings with this command, the details for which are discussed in the following paragraphs: 1) before creating your own branch, be sure that you have checked out the correct parent branch first; 2) when checking out someone else's branch, be sure to get their latest changes; 3) before checking out someone else's branch, be sure to save any of your own changes to your current branch .</p>

    <p>Depending on the branching strategy for the team you are working with, you need to be sure that before creating a new branch that you have used the checkout command <i>first</i> to checkout the <i>parent</i> branch for your new branch.  In the example above, the parent branch was the master branch.  But this goes back to the chapter about branching: If you are working with a group that uses the "develop" or "buffer" branch strategy, you need to first checkout the "develop" or "buffer" branch first, and then create you new branch on top of that.  This is shown in the example above, where a developer, working with a group that is not using a "buffer" branch, made sure to checkout the master branch first before creating his new branch.</p>
    
    <p>It is also important to remember that "checkout" sometimes does and does not interact with the remote repo and it can be confusing.  Checkout, in this command, means to change over to another branch that your local repo/ledger knows about. As shown in the figure above, for example, if Amy's branch were available locally, you could checkout her branch.  However, if Fred had uploaded a new branch, called, let's say, feature_fix_preamble, but you have not run a "get remote update" command in a while, your local repo/ledger will not be aware at all of Fred's branch.  So if Fred tells you to "checkhout the feature_fix_preamble" branch, you may not be able to check it out and you may not even see it if you run the "git branch -a" command.  So be sure to run "git remote update" before trying to checkout to a different branch.  Finally, although we have not discussed the "pull" command in detail, it is always good practice to run the "git pull" command when checking out someone else's branch to ensure that you pull down the most recent version of the branch from the remote repo.</p>

    <p>And finally, before checking out (and pulling!) a different branch to investigate, you need to make sure that you save the changes that you've made to your current branch.  The checkout command does not perform a miracle switcheroo like a revolving door that magically swaps out your branch with the other branch. It is a swap, yes, but not like you may expect.  So, if you have been working on your branch and have not staged, committed, or pushed in a while, those changes need to be preserved. For example, assume you are working on your branch and you have created a new file, called signatures.txt, and are in the midst of editing it and you need, for some reason, to look at another branch.  You first save the changes to signatures.txt in the editor, and then checkout the other branch.  You might think that the signatures.txt file would not be present in the other branch.  But it actually will be. There can be other surprises like this when switching branches. Like I said, the command is not like a magical revolving door.  It is more like a revolving door with doggie doors that can allow artifacts to be unexpectedly leaked from one spot to another.  And sometimes log altogether.</p>

    <p>  There are a number of scenarios when switching branches that can cause consternation for your simple, but logical mind.  And there are a few ways to mitigate those surprises.  The first is to use the "git stash" command which places your branch as-is into a backup and which can be restored with a "git pop" at a later time. The other method is to always stage and/or commit everything on your branch before checking out another branch.  The latter is not always convenient when you are in the middle of some massive monkey coding and are not ready to stage nor certainly commit.  So be aware of what you have in your local branch before switching to another. </p>
    <h4>git checkout: Undo a checkout</h4>
    <p>Normally you can undo a checkout by just checking out the branch you had been on prior to checking out.  But if you do this undo action, be aware if you have made any changes to that secondary branch that you had checked out.</p>

    <h4>git checkout: Bottomline</h4>
    <ul>
      <li>Before running "checkout -b &lt;some_new_branch&gt;" to create a new branch, be sure you have first checked out (and pulled!) the correct parent branch </li>
      <li>Before running "checkout &lt;some_other_existing_branch&gt;" to change to another branch, be sure to stage and commit or stash your branch</li>
      <li>Before running "checkout &lt;some_other_existing_branch&gt;" run "git remote update" to confirm that the branch does indeed exist</li>
      <li>After running "checkout &lt;some_other_existing_branch&gt;" run "git pull" to ensure that you download the most recent version of the branch</li>
     
    </ul>
  
  
 
</div>
</body>
</html>
