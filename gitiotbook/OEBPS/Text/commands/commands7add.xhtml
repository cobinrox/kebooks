<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>git add</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->
  <link rel="stylesheet" href="../../Styles/table.css" type="text/css" />

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../../Styles/page-template.xpgt" />
</head>

<body>
<div>
  <h3>git add</h3>
  <p><b>Syntax:</b></p>
  <pre><span class="inner-pre" style="font-size: 10px">
    git add &lt;file_name&gt;
    git add .
  </span></pre>
    <div style="text-align:center;"><img src="../../Images/commands/add.jpg" alt=" " style="width: 500px;;padding-bottom:0.2em"/><br /><i>git add</i></div>
    <h4>git add: What it's supposed to do</h4>

  <p>Moves your changes into the "staging" state.  To stage (add) individual files one-by-one, you can use the first version of the syntax, to add all of your changes use the second version.</p>
  <p>The following example shows taking three previously-made changes (adding a new file, deleting an existing file, and changing an existing file) and moving all three changes to the staging area: </p>
  <pre><span class="inner-pre" style="font-size: 10px">
    C:\Users\jsmith\constitution&gt;git status
    On branch my_new_branch
    Changes not staged for commit:
      (use "git add/rm &lt;file&gt;..." to update what will be committed)
      (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
            modified:   ammendments.txt
            deleted:    preamble
    Untracked files:
      (use "git add &lt;file&gt;..." to include in what will be committed)
            deviant_acts.txt
    no changes added to commit (use "git add" and/or "git commit -a")

    C:\Users\jsmith\constitution&gt;git add .

    C:\Users\jsmith\constitution&gt;git status
    On branch my_new_branch
    Changes to be committed:
    (use "git reset HEAD &lt;file&gt;..." to unstage)

        modified:   ammendments.txt
        new file:   deviant_acts.txt
        deleted:    preamble
    </span></pre>
 <h4>git add: Undoing files that have been staged</h4>
    
  <pre><span class="inner-pre" style="font-size: 10px">
  git reset
  </span></pre>
  <p>Here's an example of using reset on the three files that were staged in the above example</p>
  <pre><span class="inner-pre" style="font-size: 10px">
    C:\Users\jsmith\constitution&gt;git reset
    Unstaged changes after reset:
    M       ammendments.txt
    D       preamble
    
    C:\Users\jsmith\constitution&gt;git status
    On branch my_new_branch
    Changes not staged for commit: 
            modified:   ammendments.txt
            deleted:    preamble
    
    Untracked files:    
            deviant_acts.txt
    
    no changes added to commit (use "git add" and/or "git commit -a")
    </span></pre>
    <p>It is important to note that in this example, all of the staged changes were moved out of the staging area, but remember that actual changes were not reverted. In other words, the ammendments file still has the new 28th ammendment, the preamble file was deleted, and the deviant_acts.txt file is still in place.</p>
    <h4>git add: Bottomline</h4>
    <ul>
      <li>Moves your local changes to the "staging" area/state</li>
      <li>Moving your changes out of the staging area does not undo the changes, it just move them out of the staging area</li>
    </ul>
  </div>
</body>
</html>
