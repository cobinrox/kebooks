<?xml version="1.1" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Introduction</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../Styles/page-template.xpgt" />
</head>

<body>
<div>
<h1>INTRODUCTION</h1>
<p>
This book is for Git users, and specifically those who are baffled by it.  It has taken me a long time to be able to grasp enough of Git to be dangerous with it. Yet it still infuriates me. I consider myself the epitome of the Gitlexic.  If you struggle with Git and, despite following instructions from your colleagues, articles, and tutorials, you are still confounded, then welcome.
</p>

<p>
If you are just starting out with Git but have a an idea what it is used for, if you have actually worked with it but still struggle with it, if you are an expert and would like to see how non-experts' thinking patterns work, or, if you are a software manager and need to grok the basics, this book is for you.  It is not a comprehensive discussion of Git, however.  It shows you some of the information about Git that should help you grasp the jist and the very important information that is skimmed over in other books,  and get you comfortable with it and be able to reproduce your workflow with it.
</p>
<h3>
So why is Git so hard to learn for some of us?
</h3>

<ul>
<li><b>Vague use of terms.</b>  One of my favorite examples of this is when someone or some article talks about "merging your changes into the master branch".  Don't worry, we'll go over what a master branch is if you are unfamiliar with it, but the statement should actually be "Be sure to merge master into your branch".  This type of imprecise language can really cause some (ahem) to go totally off track.  Imagine if you were new to driving and someone said "be sure to drive on the right side of the street".  So you proceed to keep to the right side of the street.  But suppose you are in London.  That would not go over well.  What you later learn is that the person meant "be sure to drive on the correct side of the street".</li> 
<li><b>Other high-quality Integrated Development Environments (IDEs).</b>  Certain IDEs can intuitively hide version control very nicely, to the point that you can forget about how it works under the hood.  IntelliJ, for example, has a robust plugin for use with Subversion (SVN).  It can automatically keep track of local changes you make to your project and you can easily go back in time and swap out files instinctively.  This is one reason why some (ahem) get lost in Git because it seems to be overridden with minutia of commands just to do simple things like looking at a file you changed a few days ago, which is very easy and intuitive in IntelliJ.</li>
<li><b>Complex workflow.</b>  A major roadblock to getting Git is understanding version control workflows, specifically the "feature branch" workflow.  Combine this complexity with vague statements like "push your changes into master" can cause some (ahem) to imagine a free-for-all dumping of changes into a master repository.  We'll cover what the workflow is and how it works for reals.</li>
<li><b>Unfamiliarity with terminal commands.</b>  Face it, not everyone knows how to traverse a directory in a command terminal, let alone list a set of branches and then know how to scroll to a second page in the list output.</li>
<li><b>Poorly implemented User eXperience (UX) implementations in IDEs.</b> This is related to overloading of terms, but some IDEs with integrated Git capabilities use poorly-chosen commands that either do not line up with Git procedures, or manage to hide information about what it is doing in the background.  The latter can be useful if it is done with a proper UX, but throwing in vague and confusing terms just causes more confusion for the Gitlexic.</li>
<li><b>Sheer number of states.</b>&nbsp;&nbsp; It's been said that the typical human mind can juggle about a maximum of seven items at any one time.  Some of us (ahem) are far below that curve, so trying to keep in mind all of the states and which commands to use is overwhelming.</li>
<li><b>Different Git server implementations.</b>&nbsp;&nbsp;There are several Git repository implementations, two of the most well-known being Github and Gitlab.  Github uses "pull request", Gitlab uses the expression "merge request" to signify a request to merge a branch into another.  Gitlab, on the other hand, uses the expression "pull request" to denote that type of action. So when someone talks about Git, you have to be sure that you know which implementation she/he is referring to.</li>
<li><b>Different Git client implementations.</b>&nbsp;&nbsp;When you view a Git hidtory tree in one visual client, you may see a different view in another client.</li>
<li><b>Which commands are local and which are remote.</b>&nbsp;&nbsp;This will be discussed later in the Architecture chapter, but Git uses a stew of commands, some of which work "locally", and some which interact with a "remote" system.  If these are not distinguished, you can find yourself easily confused about what the effects the commands take.</li>
<li><b>Commit means commit.</b>&nbsp;&nbsp;  Except when using Git.  Many of us believe that the verb "commit" means that changes have been uploaded and pushed into the master copy of a document or piece of code.  Like two-phased commit: Once the commit is committed, then you are good to move on.  But that's not really how Git uses the term.</li>
</ul>

<h3>What you'll see.</h3>
<p>
The concepts in this book are based on a culmination of observations of working with Git; from watching others use (or misuse or misunderstand) Git; and observations of too many cooks trying to explain the Git workflow to skeptics and to those who have learned the art of raising an eyebrow.  So here's what you'll see:
</p>
<ul>
<li>Unique diagrams to help visualize Git architecture and workflows</li>
<li>Precise definitions</li>
<li>Real-world things you need to know</li>
<li>Real-world scenarios you might encounter</li>
<li>Analogies</li>
</ul>
 
<h3>What you won't see.</h3>
 
<ul>
<li><b>Maps of the London subway.</b>  The traditional Git books use the branching timeline idiom to attempt to show how Git branching works.  These maps become a jumble if the user is not yet versed in the separation of the local and remote repositories.  Plus I'm personally sick of seeing them: they all look alike and the simpler maps are obvious to the point of being pedestrian, whereas the more complex are illegible and make my eyes googlie.</li>
</ul>
  <p>&nbsp;</p>
  <div style="text-align:center;"><img src="../Images/londonsub.jpg" alt=" " style="width: 200px; height: 150px; padding-bottom:0.2em"/><br /><i>The London Subway</i></div>
  <p>&nbsp;</p>
<ul>
<li><b>  The phrase "be sure to push your changes to master".</b>&nbsp;&nbsp;(Or "be sure to push your changes to develop".) This is a very sloppy phrase along the lines of "be sure to drive on the right side of the street".  The photo below shows just such a set of instructions which can be interpreted in several ways.  Of course I interpreted it as "how to merge my code into the develop branch", but was also politely told that "developers are not allowed to push to the develop branch".  If you are confused by that sentence, then again, welcome.</li>
</ul>
<p>&nbsp;</p>
<div style="text-align:center;"><img src="../Images/sigh.jpg" alt=" " style="width: 200px; height: 150px; padding-bottom:0.2em"/><br /><i>Merge to Develop or Merge Develop into Your Branch?</i></div>
<p>&nbsp;</p>

 
<h3>
How to use/traverse this book.
</h3>
 
<ul>
<li><b>What is Git?</b>  This is the obligatory marketing spiel about how great Git is.  Skip this chapter if you already know what Git is and what it is used for.</li>
<li><b>The Branching Workflow.</b> This may be the most important chapter. If you are confused by the phrase "be sure to merge with master", or if you are a software manager or software tester, you'll probably want to look through this chapter.</li>
<li><b>Architecture Chapter.</b> Skip this chapter if you are already comfortable with the ledger/index, working, staging, commit, and local/remote terms.  Otherwise skim through this and refer back to it as you move through other chapters. Unfortunately, you do need to know these items to help you understand Git.</li>
<li><b>Using Git.</b></li>
<li><b>Git Glossary</b></li>
<li><b>Git Cheat Sheet</b></li>
<li><b>Appendix A: Setting up Github account</b></li>
<li><b>Appendix B: Git States, or No Wonder I Can't Understand This</b></li>
</ul>
 

<h3>
What you should bring to the table.  
</h3>
 
Readers should have the following skills at the least.  Imagine that, if instead of Git, you are trying to learn how to use a GPS system.  In order to learn the GPS, you need to know how to operate the car that the GPS is located in.  Similarly, in order to understand Git, you need to know how to use the system in which it is installed.
<ul>
<li><b>Knowledge of common Information Technology (IT) terms</b></li>
<li><b>Familiarity with common IT/computer tasks</b>

  <ul>
  <li>How to use a mouse</li>
  <li>Use of right mouse click and context menus</li>
  <li>Use of copy and paste shortcuts both inside and outside of a command line terminal</li>
  <li>Accessing the internet or your intranet from your workstation</li>
  <li>How to install applications</li>
  <li>How to open a command line terminal</li>
  <li>Use of basic command line commands such as create, delete, change directories; display file contents, edit files, do tab-command completion</li>
  <li>Understand your local disk drive directory layout</li>
  <li>Understand the concept of a local computer user account</li>
  <li>Understand the concept of a local computer user account "home" directory</li>
  <li>Understand the difference between single quotes, double quotes, and grave accent marks (or backticks)</li>
  <li>Know how to display hidden files and show file extensions, both via a file viewer and via the command line</li>
  <li>Know how to navigate web sites, especially those with complex layouts</li>
  </ul>
</li>
<li><b>Some familiarity with version control</b></li>
<li><b>Have an email account so that you can create a GitHub account.</b>  This is not actually necessary, but to use GitHub you need an account and to have an account you will need a (temporary, at least) accessible email account.</li>
<li><b>Have a Git account at your work or home.</b>  This is not actually necessary, but you should have an idea of how to access Git for your situation.  Appendix A shows how to create a GitHub account.</li>
</ul>
 
<h3>Terminology</h3>
<p>Several terms in the book are preferred over others to increase understanding, avoid confusion, or simplify the text.  These terms that you'll see often include:</p>
<ul>
  <li>laptop.  This is used as a general term for a Git user or client's workstation.  It is assumed that the reader is most likely a client-side user, and such a client/user in this book is visualized as using a laptop.</li>
  <li>they/their. These are sometimes used in place of the phrases "he or she" and "his or her", respectively to simplify the text.  Even though these are plural, it is hoped that their use will simplify some sentence structure.</li>
  <li>repo. This is a shortcut for the term repository.</li>
</ul>
</div>
</body>
</html>