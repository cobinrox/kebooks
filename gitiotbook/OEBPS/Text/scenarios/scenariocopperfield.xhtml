<?xml version="1.1" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Scenario Behavioral Disparity</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->
  <link rel="stylesheet" href="../../Styles/table.css" type="text/css" />

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../../Styles/page-template.xpgt" />
</head>

<body>
<div>
<h3>Scenario: Behavioral Disparity, or "WTF?"</h3>
<p>The clinical definition of <i>behavioral disparity:</i></p>
<div style="text-align:center;"><p><i>“Behavioral Disparity” refers to the phenomenon where two or more entities exhibit different behaviors despite being in identical or similar conditions or states.</i></p></div>
<p>This scenario occurs when you have two copies of the same repository and branch in two different locations and both the "git status" and "git log" commands show that they are in the identical state, yet they behave differently when the code is built and or executed.  Although from the Git point of view the repos are "identical", they nonetheless behave differently so you know that in reality there is something different between them.  There may be a number of reasons why you may find yourself in this situation, usually when you are trying to disprove the "well it works on my machine" bromide.  I also had it happen when I had to suddenly step out of the office to help a friend with a flat tire and, upon returning to the office, totally forgot what I had been working on and couldn't get anything to run.</p>

<!-- <div style="text-align:center;"><img src="../../Images/tired.jpg" alt=" " style="width: 300px; height: 350px; padding-bottom:0.2em;transform: rotate(90deg);"/><br /><i>Your work may be interrrupted for all kinds of weird reasons, and upon returning to your desk, you may totally forget what you were doing.</i></div> -->
<div style="text-align:center;"><img src="../../Images/tired_rotated.jpg" alt=" " style="width: 220; height: 320px;padding-bottom:0.2em;transform: rotate(90deg);"/><br /><i>Your work may be interrrupted for all kinds of weird reasons, and upon returning to your desk, you may totally forget what you were doing.</i></div>

<br />


<p>
In this scenario, though, the bottom line is it will seem like a David Copperfield trick on your mind and your colleagues will make fun of you because "Git is perfect, Git will never "lie" or "deceive", and Git <i>will always do the right thing.</i>" (sarcasm added).</p>

<p>But there are a couple of other scenarios where the picture is not as cut-and-dried.  In a few of these cases, either the corporate Git server runs on a VPN that is isolated from the testing network (they are mutually exclusive), or the Git server and target machines are geographically separated, as in a private or secret room and private network.  And, in the latter case, you are not allowed to bring in your laptop and connect it to the secret network.</p>


<p>There are a couple of solutions that can work for the first situation, when your laptop can connect to both the Git repo and target networks, but not at the same time:</p>

<ol>
  <li>Download the code from the corporate Git repo to your laptop, then switch to the test network, and use secure copy (SCP) or file transfer (FTP) to copy the code to the test machine on the test network.</li>
  <li>Install an instance of Git on the test machine on the test network, then download the code from the corporate Git repo to your laptop, switch to the test network, set up the test network as a remote Git repo, and then use the Git "push" command to transfer the code to the test machine. I've used this approach before but it can get tricky due to the number of states that Git can find itself in, especially when you are talking about two separate, disparate machines.  It can work, but you really need to know what you are doing.</li>
</ol>
<p>For the second situation, where the networks, machines, and rooms are isolated and the target machine is in a secure location, there are also several solutions:</p>
<ol>
  <li>Download the code from the corporate Git server, then save the code to a write-once medium (e.g. a DVD) physically bring that medium to the target machine and load it.  This is often referred to as sneaker-net.</li>
  <li>Use a one-way guard (or "file diode") to allow upload of the code from your laptop to the target system safe zone and then download to the target machine.</li>
  <li>Install an instance of Git or Git server on the secret network.</li>
</ol>
<p>There is yet a third variation of this David Copperfield situation that I've run into.  This is where you have both versions of code but in different directory locations on your laptop, one of the versions is in, say "C:/projects/pitts", and another under "C:/gitsux/pitts" and of course Git reports that the two are identical. (You may be doing that because you do not trust Git branches, hmmmmm?) In this case just find yourself a decent file/directory comparison tool and find the differences between the two. You may even have to use the tool to check under the hood in the ".git" subdirectory to prove out that something is different.  You may find that one of the files is different but that particular file or file type is listed in the ".gitignore" file and may explain why Git thinks there is no difference.</p>

</div>
</body>
</html>