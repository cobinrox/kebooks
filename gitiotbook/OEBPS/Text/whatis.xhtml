<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>What is Git</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../Styles/page-template.xpgt" />
</head>

<body>
<div>
<h1>What is git</h1>
<h2>Git is Just a Version Control Tool</h2>
<p>
Git is an implementation of a version control system, just like Subversion, CVS, or Perforce.  It, and the latter peers of git, provide an off-site (preferably) storage of a project's files (usually source code) to which individual players in the project can contribute in a controlled manner.  The master copy of the files are secured and contibutors rely on a workflow among themselves to ensure that the master copy (on a server or cloud-based service) gets updated with individual's changes.  So git is nothing new or unusual in the world of version control. It just happens to be the flavor of the day and you may need to use it for the particular job you are currently in.  So, like other IT tools, you just have to learn its idiosyncracies.
</p>
<p>insert figure here showing version control</p>
<h2>Git Supports Branching</h2>
<p>
One of git's selling points, though, is that it is implemented in a way to support branching.  If your job does not require the branching paradigm (which is discussed in the next chapter), you can still use git just as any other version control system. However, you may find that software teams these days are turning to branching as a workflow and it would behoove you to get familiar with branching and git if you are not already.  Although there may be better, easier-to-understand implementations of branching version control tools in the future, for now git is the hot new shiny toy.  It is unlikely that the branching workflow will go away, but, if we are lucky, someday we'll have a more intuitive implementation than git.
</p>
<p> insert figure of branching</p>
<h2>Git Takes Up Less Room</h2>
Another one of git's selling points is that it allows developers to "have the entire historical code base" on thier own local machines (e.g. a developer's laptop) even if "they are offline!".  Other than git's footprint size being smaller compared to other version tools, I'm not certain why having the entire code base off line is such a selling point since you can also work totally offline with the other versioning systems, though git helps you to follow the branching strategy to keep your code from totally messing up the master copy once you do go back online. But <i>using</i> a branching strategy or workflow is really the selling point, not the fact that git can <i>support</i> such a strategy.

<h2>
Don't over-buy it.
</h2>
<p>
I was explaining the use of PlantUML to a project manager a while ago and telling him that, unlike what an engineer had said to him, PlantUML does not automatically create sequence diagrams from existing code.  When I showed him what PlantUML actually does, he said, ah "They over-sold it"; meaning that someone had regurgitated over-blown and purposefully murky and vague marketing hype about the tool.  Just as in that case, don't be over-sold by git. It's a tool like any other that we use.
</p>
</div>
</body>
</html>