<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>What is Git</title>
  <!--link rel="stylesheet" href="../Styles/stylesheet.css" type="text/css" /-->

  <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="../Styles/page-template.xpgt" />
</head>

<body>
<div>
<h1>WHAT IS GIT</h1>
<h2>Git is Just a Version Control Tool</h2>
<p>
  Git is an implementation of a version control system (VCS), just like Subversion, CVS, or Perforce. Or even Confluence or Sharepoint. 
</p>
<div style="width:375 px; font-size:80%; text-align:center;"><img src="../Images/simplesvn.jpg" alt=" " style="padding-bottom:0.2em"/><br /><i>Simple version control that most of us understand.</i></div>
<p>
  Git, and the latter peers, provide an off-site (preferably) storage of a project's files (usually source code) to which individual players in the project can contribute in a controlled manner.  The master copy of the files are secured and contibutors rely on a workflow among themselves to ensure that the master copy (on a server or cloud-based service) gets updated with individual's changes.  So git is nothing new or unusual in the world of version control. It just happens to be the flavor of the day and you may need to use it for the particular job you are currently in.  So, like other IT tools, you just have to learn its idiosyncracies.
</p>
<h3>Git Supports Branching</h3>
<p>
One of git's selling points, though, is that it is implemented in a way to support branching.  If your job does not require the branching paradigm (which is discussed in the next chapter), you can still use git just as any other version control system. However, you may find that software teams these days are turning to branching as a workflow and it would behoove you to get familiar with branching and git if you are not already. <i>Using</i> a branching strategy or workflow is really the selling point, not the fact that git can <i>support</i> such a strategy. Although there may be better, easier-to-understand implementations of branching version control tools in the future, for now git is the hot new shiny toy.  It is unlikely that the branching workflow will go away, but, if we are lucky, someday we'll have a more intuitive implementation of git.
</p>
<p> insert figure of branching</p>

<h3>Git Takes Up Less Room</h3>
<p> 
Another one of git's selling points is that it allows developers to "have the entire historical code base" on thier own local machines (e.g. a developer's laptop) even if "they are offline!".  Other than git's footprint size being smaller compared to other version tools, I'm not certain why having the "entire code base" off line is such a selling point since you can also work totally offline with the other versioning systems, though git helps you to follow the branching strategy to keep your code from totally messing up the master copy once you do go back online. Note how the phrase "entire code base" is in quotes. This is to emphasize that the "entire code base" is actually an imprecise and subject to interpretation.  No version control system (that I know of, anyway), that involves a remote repository, can promise that you will always have the entire code base.  If you are working at an airport, offline, and your colleague in Toronto updates a document or code to the main/master repository, then you do not have the entire code base.  That may be obvious, but the hype with Git neglects to distinguish this.
</p>

<h3>Don't over-buy it.</h3>
<p>Many of the "selling" points of Git can be disputed or achieved with other VCS systems.  And it is very easy to poke holes in a process that proudly touts its use of Git but implements a sloppy branching workflow.</p>
<p>
A project manager was telling me about a new tool that an engineer had showed to her that "automatically creates sequence diagrams from existing code".  Intrigued, I found that she was talking about PlantUML.  When I explained that PlantUML creates sequence diagrams not from production code, but from mark-up that the engineer has to write outside of the production code, she said, somewhat disappointed, "Oh - he (the engineer) oversold it".
So don't get sucked into  someone that regurgitates grandiose and purposefully-murky and vague marketing hype about the tool: Don't be oversold by Git. It's a tool like any other that we use. It is not magical and you can still get things very mucked up when using it.
</p>
</div>
</body>
</html>